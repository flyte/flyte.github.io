<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Beta not Best - Blog</title><link href="https://flyte.github.io/" rel="alternate"></link><link href="https://flyte.github.io/feeds/blog.atom.xml" rel="self"></link><id>https://flyte.github.io/</id><updated>2017-08-02T00:00:00+01:00</updated><entry><title>MQTT Camera Based Motion Tracking for Home Assistant</title><link href="https://flyte.github.io/mqtt-camera-based-motion-tracking-for-home-assistant.html" rel="alternate"></link><published>2017-08-02T00:00:00+01:00</published><updated>2017-08-02T00:00:00+01:00</updated><author><name>Ellis Percival</name></author><id>tag:flyte.github.io,2017-08-02:/mqtt-camera-based-motion-tracking-for-home-assistant.html</id><summary type="html">&lt;p&gt;This blog post will demonstrate the process I use to add motion tracking to any IP camera (and also perhaps directly connected ones) using the free and open source software &lt;a href="https://github.com/Motion-Project/motion"&gt;Motion&lt;/a&gt;, and publish the motion detection over the &lt;a href="http://mqtt.org/"&gt;MQTT message bus&lt;/a&gt; for use by &lt;a href="https://home-assistant.io/"&gt;Home Assistant&lt;/a&gt;, or indeed anything else …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog post will demonstrate the process I use to add motion tracking to any IP camera (and also perhaps directly connected ones) using the free and open source software &lt;a href="https://github.com/Motion-Project/motion"&gt;Motion&lt;/a&gt;, and publish the motion detection over the &lt;a href="http://mqtt.org/"&gt;MQTT message bus&lt;/a&gt; for use by &lt;a href="https://home-assistant.io/"&gt;Home Assistant&lt;/a&gt;, or indeed anything else that may want to use it.&lt;/p&gt;
&lt;p&gt;Since I run my services with &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, it utilises a &lt;a href="https://hub.docker.com/r/flyte/motion-mqtt/"&gt;Docker Image of my creation&lt;/a&gt;, but the configuration details still apply, regardless of how you run Motion.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I have a handful of IP cameras connected to the network in my home. They are relatively cheap, low powered, sparsely featured devices which just about handle the capture and streaming of video using Motion JPEG.&lt;/p&gt;
&lt;p&gt;Home Assistant has no problem viewing the video feed from the devices, but in order to use the video in my automations, I needed a way of detecting motion. Thankfully, there's a great, lightweight, free and open source project called &lt;a href="https://github.com/Motion-Project/motion"&gt;Motion&lt;/a&gt; which handles the detection of motion in video streams.&lt;/p&gt;
&lt;p&gt;The majority of the 'smart' devices in my home communicate over the MQTT message bus. This is very convenient and integrates very well with Home Assistant. I wanted to find a way to use Motion to detect motion on my IP cameras and publish the events on an MQTT topic.&lt;/p&gt;
&lt;p&gt;Most of the services running on my home server are within Docker containers. I wanted Motion to be no different so I &lt;a href="https://hub.docker.com/r/flyte/motion-mqtt/"&gt;created a Docker Image for it&lt;/a&gt;, specifically including an MQTT publish client.&lt;/p&gt;
&lt;h2&gt;Camera Configuration&lt;/h2&gt;
&lt;p&gt;All of the cameras I use serve Motion JPEG streams over HTTP. This method is not limited to this configuration, and will support any camera which is supported by Motion. This includes &lt;a href="https://htmlpreview.github.io/?https://github.com/Motion-Project/motion/blob/master/motion_guide.html#netcam_url"&gt;network cameras&lt;/a&gt; and also &lt;a href="https://htmlpreview.github.io/?https://github.com/Motion-Project/motion/blob/master/motion_guide.html#videodevice"&gt;directly connected ones&lt;/a&gt;, although you'll need to &lt;a href="https://docs.docker.com/engine/reference/commandline/run/#add-host-device-to-container-device"&gt;pass the device through&lt;/a&gt; to the docker container.&lt;/p&gt;
&lt;p&gt;In order to receive a Motion JPEG stream from my cameras, I use the following URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://10.0.0.10/videostream.cgi?loginuse=admin&amp;amp;loginpas=mypassword
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may be able to get the URL for your camera by viewing its web interface in your browser (Chrome in this case), right clicking on the video feed and choosing 'Copy image address'.&lt;/p&gt;
&lt;p&gt;Note that in my case, simply browsing to the above URL doesn't seem to work. The same URL does work within Home Assistant and Motion, however.&lt;/p&gt;
&lt;h2&gt;Motion Configuration&lt;/h2&gt;
&lt;p&gt;Motion requires the use of a configuration file, so in order to get this, use the following Docker command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -ti --rm flyte/motion-mqtt config &amp;gt; motion.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're not using Docker, then you should be able to find this file in &lt;code&gt;/etc/motion&lt;/code&gt; or &lt;code&gt;/usr/local/etc/motion&lt;/code&gt;. It may be called &lt;code&gt;motion.conf&lt;/code&gt; or &lt;code&gt;motion-dist.conf&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Camera Setup&lt;/h4&gt;
&lt;p&gt;To set up Motion to connect to your IP camera, edit the &lt;code&gt;motion.conf&lt;/code&gt; file and perform the following actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comment out the &lt;code&gt;videodevice /dev/video0&lt;/code&gt; line&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncomment the &lt;code&gt;netcam_url&lt;/code&gt; line and set it to the URL of your video camera. For example:&lt;/p&gt;
&lt;p&gt;netcam_url http://10.0.0.10/videostream.cgi?loginuse=admin&amp;amp;loginpas=mypassword&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note, for my cameras I use the &lt;code&gt;mjpeg://&lt;/code&gt; 'protocol', &lt;a href="https://htmlpreview.github.io/?https://github.com/Motion-Project/motion/blob/master/motion_guide.html#netcam_url"&gt;as described in the Motion guide&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netcam_url mjpeg://10.0.0.10/videostream.cgi?loginuse=admin&amp;amp;loginpas=mypassword
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Disable Picture and Video Capture&lt;/h4&gt;
&lt;p&gt;Since we're only using Motion to detect motion and not to record the events, change the following two config values from 'on' to 'off':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output_pictures off
ffmpeg_output_movies off
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Event Length&lt;/h4&gt;
&lt;p&gt;By default each event lasts for 60 seconds after the motion is no longer detected. This is too long for my liking, so adjust the amount of seconds with the &lt;code&gt;event_gap&lt;/code&gt; configuration value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;event_gap 5
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;MQTT Configuration&lt;/h4&gt;
&lt;p&gt;Finally, in order to actually publish the events to an MQTT topic, you must set the &lt;code&gt;on_event_start&lt;/code&gt; and &lt;code&gt;on_event_end&lt;/code&gt; configuration values. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;on_event_start mosquitto_pub -h test.mosquitto.org -u yourusername -P yourpassword -t &amp;quot;cam/office/motion&amp;quot; -m &amp;quot;on&amp;quot;
on_event_end mosquitto_pub -h test.mosquitto.org -u yourusername -P yourpassword -t &amp;quot;cam/office/motion&amp;quot; -m &amp;quot;off&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're not using my Docker image, then you should be able to get the &lt;code&gt;mosquitto_pub&lt;/code&gt; tool from the &lt;code&gt;mosquitto-clients&lt;/code&gt; package. &lt;code&gt;apt-get install mosquitto-clients&lt;/code&gt; if you're using Ubuntu/Debian/Raspbian.&lt;/p&gt;
&lt;p&gt;Have a look at &lt;code&gt;mosquitto_pub --help&lt;/code&gt; for more usage information.&lt;/p&gt;
&lt;h2&gt;Run the Service&lt;/h2&gt;
&lt;p&gt;For my Docker containers, I tend to create a &lt;code&gt;docker&lt;/code&gt; directory, then organise the files for each of the containers within subdirectories. For example, my three cameras are organised as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;motion-mqtt
├── office
│   ├── config
│   │   └── motion.conf
│   └── run.sh
├── server_room
│   ├── config
│   │   └── motion.conf
│   └── run.sh
└── workshop
    ├── config
    │   └── motion.conf
    └── run.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each of the &lt;code&gt;run.sh&lt;/code&gt; files contains the command I use to run each container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
    --name motion-mqtt-office &lt;span class="se"&gt;\&lt;/span&gt;
    -v /home/flyte/docker/motion-mqtt/office/config:/motion:ro &lt;span class="se"&gt;\&lt;/span&gt;
    flyte/motion-mqtt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the Motion configuration file is within a &lt;code&gt;config&lt;/code&gt; directory which is shared within the Docker container as a volume at &lt;code&gt;/motion&lt;/code&gt;. By default, the container will look for a configuration file at &lt;code&gt;/motion/motion.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you've created a directory structure and created a &lt;code&gt;run.sh&lt;/code&gt; script, make the script runnable with &lt;code&gt;chmod +x run.sh&lt;/code&gt; and then execute it with &lt;code&gt;./run.sh&lt;/code&gt;. This should now have created a new Docker container. You can check the logs with &lt;code&gt;docker logs -f motion-mqtt-office&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If everything's gone well, you should now be able to wave at the camera and receive log entries along the line of the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1:ml1] [NTC] [ALL] motion_init: Started motion-stream server on port 8081 (auth Disabled)
[1:ml1] [NTC] [EVT] event_new_video: Source FPS 2
[1:ml1] [NTC] [ALL] motion_detected: Motion detected - starting event 1
[1:ml1] [NTC] [ALL] mlp_actions: End of event 1
[1:ml1] [NTC] [EVT] event_new_video: Source FPS 2
[1:ml1] [NTC] [ALL] motion_detected: Motion detected - starting event 2
[1:ml1] [NTC] [ALL] mlp_actions: End of event 2
[1:ml1] [NTC] [EVT] event_new_video: Source FPS 2
[1:ml1] [NTC] [ALL] motion_detected: Motion detected - starting event 3
[1:ml1] [NTC] [ALL] mlp_actions: End of event 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use your favourite MQTT subscription tool (MQTT Lens or mosquitto_sub in my case) to check that you're publishing events to MQTT properly.&lt;/p&gt;
&lt;h2&gt;Home Assistant Configuration&lt;/h2&gt;
&lt;p&gt;To add the new motion sensor to Home Assistant, create a new Binary Sensor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;binary_sensor&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Office Motion&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;platform&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mqtt&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;state_topic&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;home/office/motion&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;payload_on&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;on&amp;quot;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;payload_off&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;off&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may also want to set its &lt;code&gt;device_class&lt;/code&gt; as &lt;code&gt;motion&lt;/code&gt; so that the UI makes more sense:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;homeassistant&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;customize&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;binary_sensor.office_motion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;device_class&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;motion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should now be enough to view the motion sensor state in Home Assistant. You may now want to set up automations using the input of the motion sensor, in which case I recommend you start with &lt;a href="https://home-assistant.io/docs/automation/"&gt;Automating Home Assistant&lt;/a&gt;.&lt;/p&gt;</content><category term="home-assistant"></category><category term="mqtt"></category><category term="motion"></category><category term="camera"></category><category term="cctv"></category><category term="docker"></category><category term="home-automation"></category></entry><entry><title>Ministry of Recycled Sound</title><link href="https://flyte.github.io/ministry-of-recycled-sound.html" rel="alternate"></link><published>2014-01-04T00:00:00+00:00</published><updated>2014-01-04T00:00:00+00:00</updated><author><name>Ellis Percival</name></author><id>tag:flyte.github.io,2014-01-04:/ministry-of-recycled-sound.html</id><summary type="html">
    An advert for the latest Ministry of Sound album came on TV the other day. As usual, they played samples of some of the tunes you'll get on the album - one of which was &lt;a href="http://youtu.be/PSYxT9GM0fQ"&gt;Darude - Sandstorm&lt;/a&gt;. It occurred to me that all of the Ministry of Sound albums I can …</summary><content type="html">
    An advert for the latest Ministry of Sound album came on TV the other day. As usual, they played samples of some of the tunes you'll get on the album - one of which was &lt;a href="http://youtu.be/PSYxT9GM0fQ"&gt;Darude - Sandstorm&lt;/a&gt;. It occurred to me that all of the Ministry of Sound albums I can remember watching adverts for contained this one track. This made me wonder how many other songs kept getting put on the MoS albums repeatedly.&lt;br&gt;
    &lt;br&gt;
    What I wanted to see was a list of tracks sorted by how many times they had appeared on a Ministry of Sound album. I had a hunch that Sandstorm would be at the top.&lt;br&gt;
    &lt;br&gt;
    &lt;a name="more"&gt;&lt;/a&gt;&lt;br&gt;
    &lt;h3&gt;Fetch the database&lt;/h3&gt;
    &lt;a href="http://www.freedb.org/"&gt;FreeDB&lt;/a&gt;&amp;nbsp;is a license-free database for use in looking up track listings for CDs. We start by &lt;a href="http://www.freedb.org/en/download__database.10.html"&gt;downloading the whole database&lt;/a&gt; (roughly 800MB bzipped file) and extracting its contents to the filesystem:
    &lt;script class="brush: shell" type="syntaxhighlighter"&gt;&lt;![CDATA[tar xjvf&amp;nbsp;freedb-complete-20140101.tar.bz2]]&gt;&lt;/script&gt;
    Producing the following file structure:&lt;br&gt;
    &lt;script class="brush: plain" type="syntaxhighlighter"&gt;&lt;![CDATA[.
    ├── blues
    │ &amp;nbsp; ├── 0008a512
    │ &amp;nbsp; ├── 000a8112
    │ &amp;nbsp; ├── 000a9612
    &amp;lt;snip&amp;gt;
    ├── classical
    │ &amp;nbsp; ├──&amp;nbsp;00073614
    │ &amp;nbsp; ├──&amp;nbsp;00088112
    │ &amp;nbsp; ├──&amp;nbsp;00092526
    &amp;lt;snip&amp;gt;
    ├── country
    etc.]]&gt;&lt;/script&gt;

    &lt;span style="font-family: inherit;"&gt;Each file (000a9612,&amp;nbsp;00073614 etc.)&lt;/span&gt;&amp;nbsp;represents a single CD and they're organised into genre directories. The files contain, among other things, the track listing of the CD.&lt;br&gt;
    &lt;br&gt;
    &lt;h3&gt;Search for Ministry of Sound CDs&lt;/h3&gt;
    Since there are over three million CDs listed in FreeDB, the files needed paring down a little.&lt;br&gt;
    &lt;script class="brush: shell" type="syntaxhighlighter"&gt;&lt;![CDATA[grep -ir "ministry of sound" . | perl -n -e '/(^.+?):/ &amp;amp;&amp;amp; print $1."\n"' | uniq &amp;gt; ministry.txt]]&gt;&lt;/script&gt;
    &lt;span style="font-family: inherit;"&gt;This grep command searches recursively and case-insensitively for the exact string "ministry of sound". It will normally output something like&lt;/span&gt;&lt;br&gt;
    &lt;script class="brush: plain" type="syntaxhighlighter"&gt;&lt;![CDATA[./blues/4512b117:DTITLE=Various Artists / Ministry of Sound: Sessions Ten]]&gt;&lt;/script&gt;
    &lt;span style="font-family: inherit;"&gt;but all we care about is the file name (4512b117) so we use perl regex to capture and print it with a newline appended. This will produce duplicate file names, so we pipe it to uniq and finally output to a file called ministry.txt.&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;This command took a long time to complete, but would have been a whole lot slower had we have done it using Python.&lt;/span&gt;&lt;br&gt;
    &lt;br&gt;
    &lt;span style="font-family: inherit;"&gt;Now we have a list of Ministry of Sound CDs, we copy the files into their own directory since we don't care what genre they're listed as.&lt;/span&gt;&lt;br&gt;
    &lt;script class="brush: shell" type="syntaxhighlighter"&gt;&lt;![CDATA[mkdir ministry
    cat ministry.txt | xargs -I {} cp {} ministry/]]&gt;&lt;/script&gt;
    &lt;span style="font-family: inherit;"&gt;We now have all of the CD files in one directory so we can move on to using Python to figure out the answer to our question.&lt;/span&gt;&lt;br&gt;
    &lt;br&gt;
    &lt;h3&gt;Parse the CD files&lt;/h3&gt;
    &lt;span style="font-family: inherit;"&gt;The first issue we need to solve is that some of the track names are too long to fit on a single line in the CD file.&lt;/span&gt;&lt;br&gt;
    &lt;script class="brush: plain" type="syntaxhighlighter"&gt;&lt;![CDATA[TTITLE13=David Morales and Larent Garnier / Ministry of Sound Dance Pa
    TTITLE13=rty Fragment]]&gt;&lt;/script&gt;
    We create a function which parses each line of the CD file and creates a dictionary of the keys and values. If a key is already in the dictionary, it will concatenate the value onto it.&lt;br&gt;
    &lt;script class="brush: python" type="syntaxhighlighter"&gt;&lt;![CDATA[def parse_cd(filename, replacements={}):
     """
     Takes the path to a FreeDB CD file and parses all
     key/value pairs into a dictionary.
     """
     lines = {}
     with open(filename, "r") as f:
      for line in f.readlines():
       # Remove newline chars
       line = line.rstrip()
       # Ignore any comments or lines without an equals in
       if "=" not in line or line.startswith("#"):
        continue

       # Extract the keys and values, forcing the values to be
       # lower case
       eq_index = line.index("=")
       key = line[:eq_index]
       value = line[eq_index+1:].lower()

       # Take a dictionary of strings to search and replace eg.
       # {" (original mix)": "", " - ": " / "}
       for old, new in replacements.items():
        value = value.replace(old, new)

       # Check for the existence of a partial line in the
       # dictionary first and then append the rest of the
       # value if it exists.
       if key in lines:
        lines[key] += value
       else:
        lines[key] = value
     return lines]]&gt;&lt;/script&gt;
    Within this function we also replace certain characters and strings. Some of the delimiters are inconsistent in FreeDB, so we make an effort to replace them all with "/". We also remove any occurrences of " (original mix)" since these are indeed the original tracks.&lt;br&gt;
    &lt;script class="brush: python" type="syntaxhighlighter"&gt;&lt;![CDATA[REPLACEMENTS = {
     " (original mix)": "",
     " - ": " / ",
     "-" : " / ",
     " / ": "/"
    }]]&gt;&lt;/script&gt;
    &lt;span style="font-family: inherit;"&gt;We create a REPLACEMENTS constant to put at the top of our script and pass it to the parse_cd function at runtime.&lt;/span&gt;&lt;br&gt;
    &lt;br&gt;
    &lt;h3&gt;Count up the tracks&lt;/h3&gt;
    &lt;div&gt;We now have all the tools we need to count up the tracks.&lt;/div&gt;
    &lt;script class="brush: python" type="syntaxhighlighter"&gt;&lt;![CDATA[if __name__ == "__main__":
     tracks_count = {}

     for filename in os.listdir(DB_DIR):
      # Parse the CD
      cd = parse_cd(os.path.join(DB_DIR, filename), REPLACEMENTS)
      # Extract the tracks
      tracks = [
       cd[x] for x in cd.keys() if x.startswith("TTITLE")]

      for track in tracks:
       # If the track has appeared already, increment its counter
       # otherwise add it and start it off at 1.
       if track in tracks_count:
        tracks_count[track] += 1
       else:
        tracks_count[track] = 1

     # Finally, sort the tracks_count dictionary by
     # amount of appearances
     for track_count in sorted(
       tracks_count.items(), key=lambda x: x[1]):
      print "%s: %s" % track_count]]&gt;&lt;/script&gt;
    &lt;span style="font-family: inherit;"&gt;We create a tracks_count dictionary to store the amount of appearances of each track. Next, we list the directory which contains all of the CD files and parse the files. We grab the tracks (the key always starts with "TTITLE") &amp;nbsp;and either increment an existing entry in tracks_count or set it to 1 if it is its first appearance on a CD. Finally, we sort the tracks_count dictionary incrementally so that the most common track appears last on our console output and then print the whole lot.&lt;/span&gt;&lt;br&gt;
    &lt;br&gt;
    &lt;h3&gt;The results&lt;/h3&gt;
    &lt;script class="brush: plain" type="syntaxhighlighter"&gt;&lt;![CDATA[~/workspace/ministry $ python ministry.py | tail -n 30
    iio/rapture: 9
    atb/9pm (till i come): 9
    deepest blue/give it away: 9
    armand van helden/mymymy: 10
    tomcraft/loneliness: 10
    underworld/born slippy: 10
    shakedown/at night: 10
    supermode/tell me why: 10
    double 99/rip groove: 10
    yves larock/rise up: 10
    jakatta/american dream: 10
    alter ego/rocker: 10
    jaydee/plastic dreams: 10
    switch/a bit patchy: 10
    kings of tomorrow/finally: 10
    junior jack/stupidisco: 11
    static revenger/happy people: 11
    strike/u sure do: 11
    paul johnson/get get down: 11
    fedde le grand/put your hands up for detroit: 12
    ministry of sound / the annual 2005 disc #2: 12
    public domain/operation blade: 12
    dee dee/forever: 13
    eric prydz/call on me: 14
    chill out session / disc 2: 14
    storm/time to burn: 16
    paffendorf/be cool: 16
    mylo/drop the pressure: 16
    roger sanchez/another chance: 21
    darude/sandstorm: 25]]&gt;&lt;/script&gt;
    &lt;div&gt;
    &lt;span style="font-family: inherit;"&gt;The top 30 most common tracks used on Ministry of Sound CD releases. Look who's sitting pretty with 25 appearances :)&lt;/span&gt;&lt;/div&gt;
    &lt;div&gt;&lt;br&gt;
    I must admit, I thought these tracks would show up more regularly, considering the amount of CD files we were searching through (1,229), but I'm happy that at least my prediction was correct. Next time you see an advert for a MoS album keep an ear out for &lt;a href="http://youtu.be/PSYxT9GM0fQ"&gt;Darude - Sandstorm&lt;/a&gt;!&lt;/div&gt;
    &lt;div&gt;
    &lt;br&gt;
    &lt;h3&gt;The full script&lt;/h3&gt;
    &lt;script class="brush: python" type="syntaxhighlighter"&gt;&lt;![CDATA[import os
    import json
    DB_DIR = "ministry"
    REPLACEMENTS = {
     " (original mix)": "",
     " - ": " / ",
     "-" : " / ",
     " / ": "/"
    }

    def parse_cd(filename, replacements={}):
     """
     Takes the path to a FreeDB CD file and parses all
     key/value pairs into a dictionary.
     """
     lines = {}
     with open(filename, "r") as f:
      for line in f.readlines():
       # Remove newline chars
       line = line.rstrip()
       # Ignore any comments or lines without an equals in
       if "=" not in line or line.startswith("#"):
        continue

       # Extract the keys and values, forcing the values to be
       # lower case
       eq_index = line.index("=")
       key = line[:eq_index]
       value = line[eq_index+1:].lower()

       # Take a dictionary of strings to search and replace eg.
       # {" (original mix)": "", " - ": " / "}
       for old, new in replacements.items():
        value = value.replace(old, new)

       # Check for the existence of a partial line in the
       # dictionary first and then append the rest of the
       # value if it exists.
       if key in lines:
        lines[key] += value
       else:
        lines[key] = value
     return lines

    if __name__ == "__main__":
     tracks_count = {}

     for filename in os.listdir(DB_DIR):
      # Parse the CD
      cd = parse_cd(os.path.join(DB_DIR, filename), REPLACEMENTS)
      # Extract the tracks
      tracks = [
       cd[x] for x in cd.keys() if x.startswith("TTITLE")]

      for track in tracks:
       # If the track has appeared already, increment its counter
       # otherwise add it and start it off at 1.
       if track in tracks_count:
        tracks_count[track] += 1
       else:
        tracks_count[track] = 1

     # Finally, sort the tracks_count dictionary by
     # amount of appearances
     for track_count in sorted(
       tracks_count.items(), key=lambda x: x[1]):
      print "%s: %s" % track_count]]&gt;&lt;/script&gt;
    &lt;/div&gt;
  </content></entry></feed>